#!/usr/bin/env ruby

require 'gli'
require 'pi-lights-control'

include GLI::App

program_desc 'Control Home Collection Lights over GPIO and RF Transmitter'

desc 'GPIO pin number for RF Transmitter. Mandatory.'
flag [:p, :pin], type: Integer

desc 'Turn lights on'
long_desc 'Sends a "power on" command to the lights'
command :on do |c|
  c.action do |global_options|
    help_now!('No pin number specified') if global_options[:pin].nil?
    command = PiLightsControl::Command.new(global_options[:pin].to_i)
    command.power_on
  end
end

desc 'Turn lights off'
long_desc 'Sends a "power off" command to the lights'
command :off do |c|
  c.action do |global_options|
    help_now!('No pin number specified') if global_options[:pin].nil?
    command = PiLightsControl::Command.new(global_options[:pin].to_i)
    command.power_off
  end
end

desc 'Sync multiple light sets'
long_desc 'Sends a "sync" command to any lights in range'
command :sync do |c|
  c.action do |global_options|
    help_now!('No pin number specified') if global_options[:pin].nil?
    command = PiLightsControl::Command.new(global_options[:pin].to_i)
    command.sync_lights
  end
end

desc 'Run a lights program'
long_desc %(
Sends a command to run a specific lights program. One of 'combination',
'steady', 'slow_blink', 'fast_blink', 'slow_fade', 'fast_fade',
'blink_steady', or 'step_fade'.
)
command :program do |c|
  c.action do |global_options, _options, args|
    program_name = args[0]
    case program_name
    when 'combination', 'steady', 'slow_blink', 'fast_blink',
         'slow_fade', 'fast_fade', 'blink_steady', 'step_fade'
      command = PiLightsControl::Command.new(global_options[:pin].to_i)
      command.program(program_name.to_sym)
    else
      help_now!('Unknown program name')
    end
  end
end

exit run(ARGV)
